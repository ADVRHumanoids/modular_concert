import sys
import re
import xml.etree.ElementTree as ET
import xacro
import xml.dom.minidom

from read_yaml import read_yaml

import tf  
import rospy
import dynamic_reconfigure.client

from flask import Flask, render_template, request, jsonify

app = Flask(__name__)

rospy.init_node('myconfig_py', anonymous=True)

ET.register_namespace('xacro', "http://ros.org/wiki/xacro")

#obtaining tree from base file
urdf_tree = ET.parse('ModularBot_new.urdf.xacro')

root = urdf_tree.getroot()

i=0
Joints=[]
origin, xaxis, yaxis, zaxis = (0, 0, 0.4), (1, 0, 0), (0, 1, 0), (0, 0, 1)

T = tf.transformations.translation_matrix(origin)
R = tf.transformations.identity_matrix()
H0 = tf.transformations.concatenate_matrices(T, R)

@app.route('/')
def index():
	return render_template('urdf_test.html')

@app.route('/square/', methods=['POST'])
def square():
  global i
  module_name = str(request.form.get('module_name', 0))

  Joints.append(read_yaml(module_name))

  if(i==0):
    Joints[i].get_rototranslation(H0, Joints[i].Proximal_tf)
  else:
    Joints[i].get_rototranslation(Joints[i-1].Distal_tf, Joints[i].Proximal_tf)

  p=str(Joints[i].kinematics.joint.distal.p_dl)
  n=str(Joints[i].kinematics.joint.distal.n_dl)

  #adding 3 links to the tree
  ET.SubElement(root, "{http://ros.org/wiki/xacro}add_link_elbow", suffix = str(i+1), p = p, n= n, x = Joints[i].x, y= Joints[i].y, z= Joints[i].z, roll= Joints[i].roll, pitch= Joints[i].pitch, yaw= Joints[i].yaw)

  #update the urdf file, adding the new module 
  write_urdf('../urdf/ModularBot_test.urdf', urdf_tree)

  file = open('../urdf/ModularBot_test.urdf', 'r') 
  urdf_file = file.read() 

  rospy.set_param('robot_description', urdf_file)

  i=i+1

  data = {'result': module_name}
  data = jsonify(data)

  return data
  

#Function writin the urdf file after converting from .xacro (See xacro/__init__.py for reference)
def write_urdf(urdf_filename, tree):
  
  out=xacro.open_output(urdf_filename)

  urdf_xacro_filename = urdf_filename + '.xacro'

  #writing .xacro file
  # tree.write(urdf_xacro_filename, xml_declaration=True, encoding='utf-8')
  xmlstr = xml.dom.minidom.parseString(ET.tostring(tree.getroot())).toprettyxml(indent="   ")
  with open(urdf_xacro_filename, "w") as f:
    f.write(xmlstr)
  

  #parse the document into a xml.dom tree
  doc = xacro.parse(None, urdf_xacro_filename)
  #perform macro replacement
  xacro.process_doc(doc)

  # add xacro auto-generated banner
  banner = [xml.dom.minidom.Comment(c) for c in
            [" %s " % ('=' * 83),
              " |    This document was autogenerated by xacro from %-30s | " % urdf_xacro_filename,
              " |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED  %-30s | " % "",
              " %s " % ('=' * 83)]]
  first = doc.firstChild
  for comment in banner:
    doc.insertBefore(comment, first)

  out.write(doc.toprettyxml(indent='  '))

if __name__ == '__main__':
	app.run(debug=True)
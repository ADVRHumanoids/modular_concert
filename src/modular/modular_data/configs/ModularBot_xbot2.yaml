## XBotInterface related configs

XBotInterface:
  urdf_path: "$(rospack find PACKAGE_NAME)/urdf/ModularBot.urdf"
  srdf_path: "$(rospack find PACKAGE_NAME)/srdf/ModularBot.srdf"
  joint_map_path: "$(rospack find PACKAGE_NAME)/joint_map/ModularBot_joint_map.yaml"

ModelInterface:
  model_type: "RBDL"

## XBot2 related configuration

# hal
xbotcore_device_configs:
  sim: $(rospack find PACKAGE_NAME)/config/hal/ModularBot_gz.yaml
  dummy: $(rospack find PACKAGE_NAME)/config/hal/ModularBot_dummy.yaml
  ec_imp: $(rospack find PACKAGE_NAME)/config/hal/ModularBot_ec_all.yaml
  ec_idle: $(rospack find PACKAGE_NAME)/config/hal/ModularBot_ec_all.yaml
  ec_pos: $(rospack find PACKAGE_NAME)/config/hal/ModularBot_ec_all.yaml

# define threads to be created
xbotcore_threads:
  rt_main: { sched: fifo, prio: 60, period: 0.001 }
  nrt_main: { sched: other, prio: 0, period: 0.005 }

# define plugins to be loaded
xbotcore_plugins:
  # this plugin is shipped with xbot2, and it generates the
  # ROS api for the framework
  # it is not designed to be real-time safe, so it must executed
  # inside a thread with `other` priority
  ros_io: { thread: nrt_main, type: ros_io }
  ros_ctrl: { thread: nrt_main, type: ros_control }

  # notice that you can reuse the same plugin, by providing
  # different names and possibly different parameters
  homing:
    thread: rt_main
    type: homing
    params:
      time: { value: 5, type: double }

  ec_ros:
    thread: nrt_main
    type: ec_ros

  state_broadcaster:
    thread: rt_main
    type: state_broadcaster_plugin
    params:
      publish_statistics:
        type: bool
        value: true

  joint_impedance_controller:
    thread: rt_main
    type: joint_impedance_controller_plugin
    params:
      chain_config:
        type: file
        value: $(rospack find 6DOF_myeyeyef)/config/controllers/chain_config.yaml

  gravity_compensation_controller:
    thread: rt_main
    type: gravity_compensation_controller_plugin
    params:
      chain_config:
        type: file
        value: $(rospack find 6DOF_myeyeyef)/config/controllers/chain_config.yaml

  robust_controller:
    thread: rt_main
    type: robust_controller_plugin
    params:
      chain_config:
        type: file
        value: $(rospack find 6DOF_myeyeyef)/config/controllers/chain_config.yaml
      controller_params:
        type: file
        value: $(rospack find 6DOF_myeyeyef)/config/controllers/robust_controller_config.json

  cartesian_admittance_controller:
    thread: rt_main
    type: cartesian_admittance_controller_plugin
    params:
      chain_config:
        type: file
        value: $(rospack find 6DOF_myeyeyef)/config/controllers/chain_config.yaml

  cartesian_impedance_controller:
    thread: rt_main
    type: cartesian_impedance_controller_plugin
    params:
      chain_config:
        type: file
        value: $(rospack find 6DOF_myeyeyef)/config/controllers/chain_config.yaml

# additional parameters that don't relate to any plugin
xbotcore_param:
  /xbot/hal/joint_safety/filter_autostart: { value: true, type: bool }
  /xbot/hal/joint_safety/filter_cutoff_hz: { value: 2.0, type: double }
  /xbot/trigger_safety_on_shutdown:
    value: true
    type: bool
